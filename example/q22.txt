22. Which inheritance is not supported by Dart? Why? B3. What is
advantage of inheritance?

-->In Dart, multiple inheritance is not supported. Dart uses single inheritance,
which means a class can inherit from only one superclass.
This design choice was made to simplify the language and avoid
the complexities and ambiguities that can arise with multiple inheritance,
 such as the "diamond problem."

   The "diamond problem" occurs when a class inherits from two classes that have a common ancestor.
    This can lead to confusion about which version of a method or attribute should be used,
     resulting in potential conflicts and issues. To avoid these problems, Dart opts for
     single inheritance.

   Advantages of Inheritance:

   1. Code Reus-ability: Inheritance allows you to reuse code from existing classes,
   reducing the need to rewrite the same code multiple times. You can create new classes
   that inherit behavior and attributes from a parent class, thus promoting code reuse
   and minimizing redundancy.

   2. Extensibility: You can extend the functionality of existing classes by creating subclasses.
   Subclasses inherit the properties and methods of their parent class and can add new features
   or modify existing ones. This promotes a modular approach to programming and makes it easier
   to add new functionality without affecting existing code.

   3. Polymorphism: Inheritance facilitates polymorphism, which is the ability of objects of
   different classes to respond to the same method in a way that is appropriate for their specific type.
    This enhances flexibility and allows for more generic and reusable code.

   4. Hierarchical Structure: Inheritance creates a hierarchical structure among classes,
   which can make the code more organized and easier to understand. It represents relationships
   and dependencies between classes in a natural and intuitive way.

   5. Maintenance and Updates: When you need to make changes to a shared behavior or attribute,
   you can update the parent class, and those changes will automatically propagate to all
   the subclasses. This simplifies maintenance and ensures consistency in the codebase.

